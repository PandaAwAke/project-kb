# This script compares the reports of the same CVEs for two different batches
# of reports. It uses the flow-analysis.json file generated by the analysis.py
# file to have a list of CVEs that are classified differently in both batches.


from collections import Counter
from evaluation.utils import (
    ANALYSIS_RESULTS_PATH,
    logger,
    config,
    load_json_file,
)


def process_cve(cve, from_category, to_category):
    is_diff_order = False
    is_same_rules = False
    # Find Matteo's code report and my report
    try:
        matteo_report = load_json_file(
            f"../../../data/prospector_reports/matteo_reports/{cve}.json"
        )
        my_report = load_json_file(
            f"../../../data/prospector_reports/reports_without_llm_mvi/{cve}.json"
        )

    except Exception as e:
        # print(f"Couldn't open a report: {e}")
        pass

    # Get lists of the candidates
    matteo_candidate_list = [
        commit["commit_id"] for commit in matteo_report["commits"]
    ]

    my_candidate_list = [commit["commit_id"] for commit in my_report["commits"]]

    if _same_elements(matteo_candidate_list, my_candidate_list):
        print(f"Processing: {cve}, from {from_category} to {to_category}")
        print(f"Same ranked candidates for {cve}")
        # Are they also ordered the same?
        if matteo_candidate_list != my_candidate_list:
            print(f"Same candidates, but ranked differently!")

        is_diff_order = True
        print("---")

    # They are not the same candidates, the reports found different candidates
    else:
        # Do the first 10 candidates match the same rules?
        matteo_relevance_scores = [
            sum([rule["relevance"] for rule in commit["matched_rules"]])
            for commit in matteo_report["commits"][:10]
        ]
        my_relevance_scores = [
            sum([rule["relevance"] for rule in commit["matched_rules"]])
            for commit in my_report["commits"][:10]
        ]
        if matteo_relevance_scores == my_relevance_scores:
            print(f"Processing: {cve}, from {from_category} to {to_category}")
            print(
                f"First ten candidates have equal relevances for {cve}: {my_relevance_scores}"
            )
            # print(f"Candidates Matteo: {matteo_candidate_list[:10]}")
            is_same_rules = True
            print("---")
            # print(f"Candidates Me: {my_candidate_list[:10]}")

        else:
            num_same, list_different = _count_same_elements(
                matteo_candidate_list, my_candidate_list
            )
            # print(f"{num_same} candidates are the same: {list_different}")
            # print(f"{num_same} candidates are the same.")

    return is_diff_order, is_same_rules


def _same_elements(list1: list, list2: list):
    set1 = set(list1)
    set2 = set(list2)

    # Check if one set is a subset of the other
    return set1.issubset(set2) or set2.issubset(set1)


def _count_same_elements(list1, list2):
    num_different = len(set(list1) & set(list2))

    min_length = min(len(list1), len(list2))

    result = []
    for i in range(min_length):
        if list1[i] == list2[i]:
            result.append("S")
        else:
            result.append("D")

    return num_different, result


def main():
    # Get all the different CVEs from the flow analysis
    flow_analysis_data = load_json_file(
        "evaluation/data/results/summary_execution/flow-analysis.json"
    )
    different_candidate_order = []
    different_candidates_matching_same_rules = []
    # Iterate through these CVEs
    for outer_key, outer_value in flow_analysis_data.items():
        for inner_key, cve_list in outer_value.items():
            for cve in cve_list:
                try:
                    is_diff_order, is_same_rules = process_cve(
                        cve, outer_key, inner_key
                    )
                    if is_diff_order:
                        different_candidate_order.append(cve)
                    if is_same_rules:
                        different_candidates_matching_same_rules.append(cve)
                except:
                    continue

    print(
        f"Same candidates, but differently ordered: {different_candidate_order}"
    )
    print(
        f"Different candidates, but equivalent relevance score in first 10 candidates: {different_candidate_order}"
    )


if __name__ == "__main__":
    main()
